#!/usr/bin/env node
"use strict";

const webpack = require("webpack");
const join = require("path").join;
const resolve = require("path").resolve;
const projectWebpackConfig = require("../webpack.config");
const Mocha = require("mocha");
const getTestPaths = require("./getTestPaths");

const BUILD_DIR = join(__dirname, "../build");

function setupWebpackConfig(webpackConfig, testPaths) {
  return Object.assign({}, webpackConfig, {
    entry: ["babel-polyfill"].concat(testPaths.map((path) => resolve(path))),

    output: {
      path: BUILD_DIR,
      filename: "test-bundle.js"
    },

    module: {
      loaders: [
        {
          test: /.js$/,
          loader: "babel-loader",
          exclude: (path) => {
            return path.includes("node_modules")
                    && !path.includes("ff-devtools-libs");
          },
          query: {
            presets: ["es2015", "stage-0"]
          }
        }
      ]
    },
    devtool: null
  });
}

function runMocha() {
  mocha.addFile(join(BUILD_DIR, "test-bundle.js"));

  mocha.run(function(failures) {
    process.on("exit", function() {
      process.exit(failures);
    });
  });
}

function runWebpack(beforeBuild, afterBuild) {
  beforeBuild();
  webpack(webpackConfig).run((err, stats) => {
    if (err) {
      console.log("ERROR", err);
    } else if (stats.compilation.errors.length) {
      console.log(stats.toString({ colors: true }));
    } else {
      afterBuild();
    }
  });
}

const dir = process.argv.slice(2)[0];
const mocha = new Mocha();
const testPaths = getTestPaths(dir);
const webpackConfig = setupWebpackConfig(projectWebpackConfig, testPaths);

runWebpack(
  () => {},
  () => runMocha()
);
